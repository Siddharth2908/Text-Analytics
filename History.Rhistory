load("C:/Siddhartha/Personal Documents/BOK/Data Science/Tuturial/Learning.R.RData")
View(Train.Matrix)
View(Spamsms)
Spamsms$Sr.No <- nchar(Spamsms$Label)
Spamsms$SrNo<-nchar(Spamsms$Label)
Spamsms@SrNo<-nchar(Spamsms$Message)
class(labels)
Class(Spamsms$Label)
load("C:/Siddhartha/Personal Documents/BOK/Data Science/Tuturial/Learning.R.RData")
View(Train.Matrix)
View(Spamsms)
View(Train.Tokens)
View(Train.DFM)
stopwords()
Train.DF<-cbind(Category = Train$Label, as.data.frame(Train.DFM) )
View(Train.DF)
names(Train.DF[c(146,148,235,238)])
names(Train.DF)<-make.names(names(Train.DF))
names(Train.DF[c(146,148,235,238)])
set.seed(48743)+
cv.folds<-createMultiFolds(Train$Label, k=10, times=3)+
cv.control<-trainControl(method = "repeatedcv", number = 10, repeats = 3, index = cv.folds)
?traincontrol
??traincontrol
cv.control<-trainControl(method = "repeatedcv", number = 10, repeats = 3, index = cv.folds)
set.seed(48743)+
+ cv.folds<-createMultiFolds(Train$Label, k=10, times=3)
set.seed(48743)+
cv.folds<-createMultiFolds(Train$Label, k=10, times=3)
library(caret)
set.seed(48743)+
cv.folds<-createMultiFolds(Train$Label, k=10, times=3)
set.seed(48743)
cv.folds<-createMultiFolds(Train$Label, k=10, times=3)
cv.control<-trainControl(method = "repeatedcv", number = 10, repeats = 3, index = cv.folds)
install.packages(doSNow)
Install.packages(doSNOW)
install.packages(doSNOW)
install.packages(doSNOW)
installed.packages("doSNOW")
?doSNOW
??doSNOW
?package.doSNOW
library(doSNOW)
install.packages("doSNOW")
library(doSNOW)
start.time<-sys.time()
starttime<-Sys.time()
cl<-makeCluster(3,type = "Sock")
cl<-makeCluster(3, type="sock")+
registerDoSNOW(cl)
cl<-makeCluster(2,type = "SOCK")
registerDoSNOW(cl)
cl<-makeCluster(3,type = "SOCK")
registerDoSNOW(cl)
rpart.cv.1<-train(Category ~ ., data = Train.DF, method = "rpart", trControl = cv.control, tuneLength = 7)
totaltime<-Sys.time()-starttime
totaltime
stopCluster(cl)
rpart.cv.1
TF<-function(row)
row/sum(row)
IDF<-function(col)
corpus.size<-length(col)
IDF<-function(col)
corpus.size<-length(col)+
doc.count<-length(which(col>0))+
log10(corpus.size/doc.count)
TF<-function(row){}
row/sum(row)
TF<-function(row){row/sum(row)}
IDF<-function(col){corpus.size<-length(col)+}
IDF<-function(col){corpus.size<-length(col), doc.count<- length(which(col>0)), log10(corpus.size/doc.count)}
IDF<-function(col){corpus.size<-length(col), doc.count<- length(which(col>0)), log10(corpus.size/doc.count)}
IDF<-function(col){corpus.size<-length(col) doc.count<- length(which(col>0))  log10(corpus.size/doc.count)}
IDF<-function(col){+corpus.size<-length(col) doc.count<- length(which(col>0))  log10(corpus.size/doc.count)}
IDF<-function(col){+
corpus.size<-length(col)+
doc.count<-length(which(col>0))+
log10(corpus.size/doc.count)+
}
IDF<-function(col){+
corpus.size<-length(col)+
doc.count<-length(which(col>0))+
log10(corpus.size/doc.count)+
}
IDF<-function(col){+
corpus.size<-length(col)+
doc.count<-length(which(col>0))+
log10(corpus.size/doc.count)}
TFIDF<-function(tf,idf){tf*idf}
Train.DF<-apply(Train.Matrix,1,TF)+
dim(Train.DF)
Train.DF<-apply(Train.Matrix,1,TF)
dim(Train.DF)
View(Train.DF)
Train.IDF<-apply(Train.Matrix,2,IDF)
Train.IDF<-apply(Train.Matrix,2,IDF)
View(Train.Matrix)
View(Train.DF)
TrainIDF<- apply(Train.Matrix,2,IDF)
str(TrainIDF)
IDF<-function(col){+
corpus.size <- length(col)+
doc.count <- length(which(col>0))+
log10(corpus.size/doc.count)}
TrainIDF<- apply (Train.Matrix, 2, IDF)
corpus.size<-length(col)
doc.count<-length(which(col>0))
IDF<-function(col){+
corpus.size <- length(col)+
doc.count <- length(which(col>0))+
log10(corpus.size/doc.count)}
TrainIDF<- apply (Train.Matrix, 2, IDF)
doc.count <- length(which(col>0))
IDF <- function(col) {
corpus.size <- length(col)
doc.count <- length(which(col > 0))
log10(corpus.size/doc.count)
}
TrainIDF<- apply(Train.Matrix,2,IDF)
str(TrainIDF)
TrainTFIDF<- apply(Train.DF, 2, tf.idf, idf = TrainIDF)
TrainTFIDF<- apply(Train.DF, 2, TFIDF, idf = TrainIDF)
dim(TrainTFIDF)
View(TrainTFIDF[1:20,1:20])
TrainTFIDF<-t(TrainTFIDF)
dim(TrainTFIDF)
Incomp.cases<-which(!complete.cases(TrainTFIDF))
Train$Message[Incomp.cases]
TrainTFIDF[Incomp.cases,] <- rep(0.0, ncol(TrainTFIDF))
dim(TrainTFIDF)
sum(which(!complete.cases(TrainTFIDF)))
View(TrainTFIDF)
TrainTFIDF<-cbind(Category = Train$Label, as.data.frame(TrainTFIDF.DFM) )
names(TrainTFIDF)<-make.names(names(TrainTFIDF))
start.time<-sys.time()
cl<-makeCluster(3,type = "SOCK")
registerDoSNOW(cl)
rpart.cv.2<-train(Category ~ ., data = TrainTFIDF, method = "rpart", trControl = cv.control, tuneLength = 7)
stopCluster(cl)
totaltime<-Sys.time()-starttime
totaltime
rpart.cv.2
TrainTFIDF<-cbind(Category = Train$Label, as.data.frame(TrainTFIDF.DFM) )
TrainTFIDF<-cbind(Category = Train$Label, as.data.frame(Train.DFM) )
names(TrainTFIDF)<-make.names(names(TrainTFIDF))
start.time<-Sys.time()
cl<-makeCluster(3,type = "SOCK")
registerDoSNOW(cl)
rpart.cv.2<-train(Category ~ ., data = TrainTFIDF, method = "rpart", trControl = cv.control, tuneLength = 7)
stopCluster(cl)
totaltime<-Sys.time()-starttime
totaltime
rpart.cv.2
save.image("C:/Siddhartha/Personal Documents/BOK/Data Science/Tuturial/Learning.R.RData")
savehistory("C:/Siddhartha/Personal Documents/BOK/Data Science/Tuturial/History.Rhistory")
